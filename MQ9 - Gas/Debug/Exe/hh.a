;    /*******************************************************
;    This program was created by the
;    CodeWizardAVR V3.14 Advanced
;    Automatic Program Generator
;    © Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;    http://www.hpinfotech.com
;
;    Project :
;    Version :
;    Date    : 5/20/2023
;    Author  :
;    Company :
;    Comments:
;
;
;    Chip type               : ATmega32A
;    Program type            : Application
;    AVR Core Clock frequency: 8.000000 MHz
;    Memory model            : Small
;    External RAM size       : 0
;    Data Stack size         : 512
;    *******************************************************/
;
;    #include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;    #include <delay.h>
;    #include <stdio.h>
;    #include <math.h>
;
;    #define F_CPU 1000000UL
;
;
;    #define USART_BAUDRATE 4800
;    #define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE*16UL)))-1)
;
;    // Voltage Reference: AVCC pin
;    #define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))
;
;    unsigned int _millis = 0;
;    unsigned int millis(void){
; 0000 0027 unsigned int millis(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0028     return _millis;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0029     }
;PCODE: $00000011 VOL: 0
;
;    // Read the AD conversion result
;    unsigned int read_adc(unsigned char adc_input){
; 0000 002C unsigned int read_adc(unsigned char adc_input){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002D         char adcHigh,adcLow;
; 0000 002E 
; 0000 002F         ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	adc_input -> Y+2
;	adcHigh -> R17
;	adcLow -> R16
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0030 
; 0000 0031         // Delay needed for the stabilization of the ADC input voltage
; 0000 0032         delay_us(10);
;PCODE: $0000001A VOL: 0
; 0000 0033 
; 0000 0034         // Start the AD conversion
; 0000 0035         ADCSRA|=(1<<ADSC);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0036 
; 0000 0037         // Wait for the AD conversion to complete
; 0000 0038         while (!(ADCSRA & (1<<ADIF)));
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0039         ADCSRA|=(1<<ADIF);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003A 
; 0000 003B         adcLow = ADCL;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 003C         adcHigh = ADCH;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003D 
; 0000 003E         return (adcHigh << 8) + adcLow;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003F     }
;PCODE: $00000036 VOL: 0
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0044 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0045 // Place your code here
; 0000 0046   //  PORTB.3 = 1;
; 0000 0047 }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 004B {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004C // Place your code here
; 0000 004D   //  PORTB.3 = 0;
; 0000 004E }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0053 {
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0054 // Place your code here
; 0000 0055       _millis++;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0056 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;
;
;
;    // Declare your global variables here
;
;
;    void uart_transmit (char data){
; 0000 005D void uart_transmit (char data){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 005E         while( !(UCSRA & (1 << 5)) );
;PCODE: $0000004B VOL: 0
;	data -> Y+0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 005F         UDR = data;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0060     }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;    char uart_recieve (void) {
; 0000 0061 char uart_recieve (void) {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0062         while( !(UCSRA & (1 << 7)) );
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0063         return UDR;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0064     }
;PCODE: $00000061 VOL: 0
;
;
;
;     void buzzer(){
; 0000 0068 void buzzer(){
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0069     int i = 0 ;
; 0000 006A     for(i = 0;i < 300; i++)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;	i -> R16,R17
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006B     {
; 0000 006C                 delay_us(50);
;PCODE: $00000071 VOL: 0
; 0000 006D                 PORTD.4 = 1;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006E                 delay_us(50);
;PCODE: $00000074 VOL: 0
; 0000 006F                 PORTC.0 = 0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0070                delay_us(50);
;PCODE: $00000077 VOL: 0
; 0000 0071                 PORTD.4 = 0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0072                 delay_us(50);
;PCODE: $0000007A VOL: 0
; 0000 0073                   PORTC.0 = 1;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0074     }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0075      }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;
;    float sensor_volt;
;    int t = 0;
;    void main(void)
; 0000 007B     {
;PCODE: $00000085 VOL: 0
; 0000 007C 
; 0000 007D     unsigned int prevMillis = 0;
; 0000 007E     unsigned int curMillis = 0;
; 0000 007F     char ledState = 0;
; 0000 0080 
; 0000 0081     // USART initialization
; 0000 0082     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0083     // USART Receiver: Off
; 0000 0084     // USART Transmitter: On
; 0000 0085     // USART Mode: Asynchronous
; 0000 0086     // USART Baud Rate: 1200
; 0000 0087     UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;	prevMillis -> R16,R17
;	curMillis -> R18,R19
;	ledState -> R21
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0088     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0089     UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008A     UBRRL = BAUD_PRESCALE;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 008B     UBRRH = (BAUD_PRESCALE>>8);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 008C 
; 0000 008D    // Timer/Counter 1 initialization
; 0000 008E // Clock source: System Clock
; 0000 008F // Clock value: 1000.000 kHz
; 0000 0090 // Mode: Normal top=0xFFFF
; 0000 0091 // OC1A output: Disconnected
; 0000 0092 // OC1B output: Disconnected
; 0000 0093 // Noise Canceler: Off
; 0000 0094 // Input Capture on Falling Edge
; 0000 0095 // Timer Period: 65.536 ms
; 0000 0096 // Timer1 Overflow Interrupt: On
; 0000 0097 // Input Capture Interrupt: Off
; 0000 0098 // Compare A Match Interrupt: Off
; 0000 0099 // Compare B Match Interrupt: Off
; 0000 009A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 009B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 009C TCNT1H=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 009D TCNT1L=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 009E ICR1H=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 009F ICR1L=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00A0 OCR1AH=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00A1 OCR1AL=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00A2 OCR1BH=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00A3 OCR1BL=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A4 
; 0000 00A5 
; 0000 00A6 
; 0000 00A7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A8 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A9 
; 0000 00AA       // ADC initialization
; 0000 00AB         // ADC Clock frequency: 125.000 kHz
; 0000 00AC         // ADC Voltage Reference: AVCC pin
; 0000 00AD         // ADC Auto Trigger Source: Free Running
; 0000 00AE         ADMUX=ADC_VREF_TYPE;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AF         ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00B0         SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00B1 
; 0000 00B2         // Global enable interrupts
; 0000 00B3            #asm("sei")
;PCODE: $000000B2 VOL: 0
	sei
;PCODE: $000000B3 VOL: 0
; 0000 00B4 
; 0000 00B5     DDRC.5 = 1;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00B6     DDRB.0 = 1;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B7     DDRC.0 = 1;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00B8     DDRC.1 = 1;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00B9     DDRD.6 = 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00BA     DDRD.5 = 0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00BB 
; 0000 00BC      DDRB.3 = 1;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00BD 
; 0000 00BE 
; 0000 00BF     while (1)
;PCODE: $000000C2 VOL: 0
; 0000 00C0           {
; 0000 00C1 
; 0000 00C2 
; 0000 00C3 
; 0000 00C4 
; 0000 00C5           //calibre sensor.............................
; 0000 00C6 
; 0000 00C7 //  float sensor_volt;
; 0000 00C8 //  float RS_air; //  Rs in clean air
; 0000 00C9 //  float R0;  // R0 in 1000 ppm LPG
; 0000 00CA //  float sensorValue;
; 0000 00CB //
; 0000 00CC ////Average
; 0000 00CD //    int i;
; 0000 00CE //    for( i = 0 ; i < 100 ; i++)
; 0000 00CF //  {
; 0000 00D0 //    sensorValue = sensorValue + read_adc(0);
; 0000 00D1 //  }
; 0000 00D2 //  sensorValue = sensorValue/100.0;
; 0000 00D3 ////-----------------------------------------------/
; 0000 00D4 //
; 0000 00D5 //  sensor_volt = (sensorValue/1024)*5.0;
; 0000 00D6 //  RS_air = (5.0-sensor_volt)/sensor_volt; // Depend on RL on yor module
; 0000 00D7 //  R0 = RS_air/9.9; // According to MQ9 datasheet table
; 0000 00D8 //
; 0000 00D9 //
; 0000 00DA //    printf("sensor_volt = %f V \n\r",sensor_volt);
; 0000 00DB //
; 0000 00DC //
; 0000 00DD //    printf("R0 = %f \n\r",R0);
; 0000 00DE //
; 0000 00DF //    delay_ms(1000);
; 0000 00E0 //////////////////////////////////////////////////////////////////////////////
; 0000 00E1 
; 0000 00E2              //Calculate volt,resistense,.........................
; 0000 00E3 
; 0000 00E4               float sensor_volt;
; 0000 00E5               float RS_gas;
; 0000 00E6               float ratio;
; 0000 00E7              //-Replace the name "R0" with the value of R0 in the demo of First Test -/
; 0000 00E8               float R0 = 0.75;
; 0000 00E9 
; 0000 00EA               int sensorValue = read_adc(0);
; 0000 00EB               sensor_volt = ((float)sensorValue / 1024) * 5.0;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;	sensor_volt -> Y+14
;	RS_gas -> Y+10
;	ratio -> Y+6
;	R0 -> Y+2
;	sensorValue -> Y+0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00EC               RS_gas = (5.0 - sensor_volt) / sensor_volt; // Depend on RL on yor module
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00ED 
; 0000 00EE 
; 0000 00EF               ratio = RS_gas / R0; // ratio = RS/R0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00F0              //------------------------------------------------------------/
; 0000 00F1 
; 0000 00F2 
; 0000 00F3              // PORTB.3 = 1;
; 0000 00F4              // PORTC.1 = 1;
; 0000 00F5 
; 0000 00F6             // printf(" %d   ",t++);
; 0000 00F7             // printf(" %f  ",sensor_volt);
; 0000 00F8             // printf("%f   ",ratio);
; 0000 00F9             // printf("%f ",RS_gas);
; 0000 00FA             // printf("\n\r");
; 0000 00FB 
; 0000 00FC 
; 0000 00FD 
; 0000 00FE 
; 0000 00FF 
; 0000 0100            curMillis = millis();
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0101           // printf("%d  \n\r",curMillis - prevMillis);
; 0000 0102 
; 0000 0103 
; 0000 0104 
; 0000 0105        if(curMillis - prevMillis < 115){
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0106        //  OCR0=0xFF;
; 0000 0107           if(curMillis - prevMillis > 105 && curMillis - prevMillis < 115)
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0108           {
; 0000 0109             int sensorValue = read_adc(0);
; 0000 010A             sensor_volt = ((float)sensorValue / 1024) *  5.0;
;PCODE: $000000F4 VOL: 0
;	sensor_volt -> Y+16
;	RS_gas -> Y+12
;	ratio -> Y+8
;	R0 -> Y+4
;	sensorValue -> Y+2
;	sensorValue -> Y+0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 010B             printf(" %f  ",sensor_volt);
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 010C           }
;PCODE: $00000109 VOL: 0
; 0000 010D 
; 0000 010E         PORTC.1 = 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 010F         }
; 0000 0110 
; 0000 0111          else if(curMillis - prevMillis > 115 && curMillis - prevMillis < 287){
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0112         // printf("co \n\r");
; 0000 0113          OCR0=0x49;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 0114           if(curMillis - prevMillis > 272 && curMillis - prevMillis < 287)
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0115           {
; 0000 0116             int sensorValue = read_adc(0);
; 0000 0117             sensor_volt = ((float)sensorValue / 1024) * 1.4;
;PCODE: $00000129 VOL: 0
;	sensor_volt -> Y+16
;	RS_gas -> Y+12
;	ratio -> Y+8
;	R0 -> Y+4
;	sensorValue -> Y+2
;	sensorValue -> Y+0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0118             printf(" %f  ",sensor_volt);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0119             if(sensor_volt > 0.2)
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 011A              {
; 0000 011B             //   printf("gos co ON \n\r");
; 0000 011C 
; 0000 011D             //   PORTB.0 = 1;
; 0000 011E              //    buzzer();
; 0000 011F              //     PORTB.0 = 0;
; 0000 0120 
; 0000 0121              }
; 0000 0122 
; 0000 0123           }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0124              PORTC.1 = 0;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0125 
; 0000 0126         }
; 0000 0127 
; 0000 0128          else if(curMillis - prevMillis > 287){
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0129          prevMillis = curMillis;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 012A         }
; 0000 012B 
; 0000 012C 
; 0000 012D 
; 0000 012E 
; 0000 012F           //Button
; 0000 0130 
; 0000 0131                 PORTD.6 = 1;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0132                  if(PIND.6 == 0)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0133              {
; 0000 0134               printf("Stop \n\r");
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0135 
; 0000 0136              delay_ms(18000);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 0137              }
; 0000 0138 
; 0000 0139 
; 0000 013A                     //Buzzer
; 0000 013B                  if(PIND.5 == 0)
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 013C              {
; 0000 013D              //  printf("gos ON \n\r");
; 0000 013E 
; 0000 013F                PORTB.0 = 1;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 0140                  buzzer();
;PCODE: $00000166 VOL: 0
; 0000 0141                   PORTB.0 = 0;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0142 
; 0000 0143              }   else{
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 0144              //  printf("Empty gas\n\r");
; 0000 0145                      PORTD.4 = 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0146                   PORTC.0 = 0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0147              }
;PCODE: $0000016F VOL: 0
; 0000 0148 
; 0000 0149 
; 0000 014A 
; 0000 014B 
; 0000 014C              delay_ms(100);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 014D 
; 0000 014E         //ADC Data
; 0000 014F            if(sensor_volt > 0.34 && ratio <20 && RS_gas < 15 )
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0150              {
; 0000 0151            //  printf("gos ON \n\r");
; 0000 0152 
; 0000 0153               PORTC.1 = 1;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0154                 buzzer();
;PCODE: $00000185 VOL: 0
; 0000 0155                  PORTC.1 = 0;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0156 
; 0000 0157 
; 0000 0158              } else{
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0159 
; 0000 015A                   PORTD.7 = 0;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 015B                   PORTC.0 = 0;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 015C 
; 0000 015D              }
;PCODE: $0000018E VOL: 0
; 0000 015E 
; 0000 015F 
; 0000 0160 
; 0000 0161 
; 0000 0162 
; 0000 0163           }
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0164 
; 0000 0165 
; 0000 0166 
; 0000 0167 
; 0000 0168               }
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;
